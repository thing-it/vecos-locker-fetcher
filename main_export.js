const OAuth2 = require('simple-oauth2');
const superagent = require('superagent');
const superagentPrefix = require('superagent-prefix');
const fs = require('fs');
const _ = require('lodash');

const config = require('./config');

class LockerFetcher {
   constructor() {
      this.apiEndpoint = superagentPrefix(config.apiEndpoint + '/api');
   }

   async initialize() {
      await this.authorize();
   }

   async start() {
      console.log("Reading Releezme data...")
      let output1 = "Location ID,Location Name,Section ID,Section Name,Locker Group ID,Locker Group Name,Locker Bank ID,Locker Bank Name,Locker Door Number,Locker ID\n";
      let output2 =`# Thing-it DAS CSV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n`;
      output2 +=`# Thing-it DAS CSV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n`;
      output2 +=`# GENERATED BY vecos-locker-fetcher On: ${(new Date().toLocaleString())};;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n`;
      output2 +=`# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n`;
      output2 +=`deviceId,actorId,sensorId,label,description,logLevel,keywords,plugin,ifcProjectGlobalId,siteName,buildingName,floorName,spaceName,xPosition,yPosition,zPosition,configuration.oauth2Password,configuration.oauth2Username,configuration.oauth2ClientSecret,configuration.oauth2ClientId,configuration.scimOauth2Username,configuration.scimOauth2Password,configuration.scimEndpoint,configuration.sapiOauth2Username,configuration.sapiOauth2Password,configuration.sapiEndpoint,configuration.sapiAdminOauth2Username,configuration.sapiAdminOauth2Password,configuration.sapiAdminEndpoint,configuration.synchronizeAllocationsInterval,configuration.userGroupId,configuration.contactNumber,configuration.expiringNotificationTime,configuration.overdueNotificationInterval,configuration.apiEndpoint,configuration.oauth2Endpoint,configuration.totalWidthUnits,configuration.totalHeightUnits,configuration.unlockRole,configuration.dimensionDepth,configuration.dimensionWidth,configuration.dimensionHeight,configuration.lockerUuid,configuration.lockerBankUuid,configuration.reservationTime,configuration.label,configuration.expiration,configuration.openTime,configuration.heightUnits,configuration.widthUnits,configuration.heightPosition,configuration.widthPosition,configuration.category,delete,assetAction\n`;
      let numLockers = 0, numStations = 0;

      const lockerGroups = await this.getREST(`/lockergroups`, `LockerGroups`);
      let lockerGroupsById = {};
      for (const lockerGroup of lockerGroups) {
         lockerGroupsById[lockerGroup.Id] = lockerGroup;
      }

      const locations = await this.getREST(`/locations`, `Locations`);
      for (const location of locations) {
         const sections = await this.getREST(`/locations/${location.Id}/sections`, `Sections`);
         for (const section of sections) {
            const lockerBanks = await this.getREST(`/sections/${section.Id}/lockerbanks`, `LockerBanks`);
            for (const lockerBank of lockerBanks) {
               console.log(lockerBank.Name);
               const deviceId = _.camelCase("lockerStation" + `${location.Name}${lockerBank.Name}`);
               output2 += `${deviceId},,,Locker Station ${location.Name} ${lockerBank.Name},,,,vecos/lockerStation,${config.ifcProjectGlobalId},${config.siteName},${config.buildingName},${config.floorName},${config.spaceName},,,,${config.oauth2Password},${config.oauth2Username},${config.oauth2ClientSecret},${config.oauth2ClientId},${config.scimOauth2Username},${config.scimOauth2Password},${config.scimEndpoint},${config.sapiOauth2Username},${config.sapiOauth2Password},${config.sapiEndpoint},${config.sapiAdminOauth2Username},${config.sapiAdminOauth2Password},${config.sapiAdminEndpoint},${config.synchronizeAllocationsInterval},${config.userGroupId},${config.contactNumber},1800000,3600000,https://sapi.releezme.net,https://identity.releezme.net,10,5,[${config.meshId}]${config.lockerAdminRoleId},,,,,,,,,,,,,,,,\n`;

               const lockers = await this.getREST(`/lockerbanks/${lockerBank.Id}/lockers`, `Lockers`);
               const sortedLockers = lockers.sort((x, y) => x.DoorNumber - y.DoorNumber);
               sortedLockers.forEach(locker => {
                  if (locker.FullDoorNumber !== '00') {
                     output1 += `${_.camelCase(location.Id)},${location.Name},${section.Id},${section.Name},${locker.LockerGroupId},${lockerGroupsById[locker.LockerGroupId].Name},${lockerBank.Id},${lockerBank.Name},${locker.FullDoorNumber},${locker.Id}\n`;

                     const lockerId = _.camelCase(`locker${locker.FullDoorNumber}`);
                     output2 += `${deviceId},${lockerId},,Locker ${locker.FullDoorNumber},,,,vecos/locker,${config.ifcProjectGlobalId},${config.siteName},${config.buildingName},${config.floorName},${config.spaceName},,,,,,,,,,,,,,,,,,,,,,,,,,,600,400,450,${locker.Id},${lockerBank.Id},60000,${locker.FullDoorNumber},604800000,10,1,1,1,2,S,,\n`;
                     numLockers++;
                  }
               });
               numStations++;
            }
         }
      }

      fs.writeFileSync(config.exportFilePath1, output1);
      fs.writeFileSync(config.exportFilePath2, output2);

      console.log(`Successfully wrote ${numLockers} lockers of ${numStations} Locker Stations to ${config.exportFilePath1} and ${config.exportFilePath1}.`);
   }

   async authorize() {
      const credentials = {
         client: {
            id: config.oauth2ClientId,
            secret: config.oauth2ClientSecret,
         },
         auth: {
            tokenHost: config.oauth2Endpoint,
            tokenPath: '/connect/token',
         },
      };

      this.oauth2 = OAuth2.create(credentials);
      const tokenConfig = {
         scope: 'Vecos.Releezme.Web.SAPI offline_access',
         grant_type: 'password',
         username: config.oauth2Username,
         password: config.oauth2Password,
      };

      await this.getToken(tokenConfig);
   }

   async getToken(tokenConfig) {
      const httpOptions = {};
      const result = await this.oauth2.clientCredentials.getToken(tokenConfig, httpOptions);
      this.accessToken = this.oauth2.accessToken.create(result);
   }

   async getREST(url, resultKey) {
      const response = await superagent
         .get(url)
         .set('Authorization', 'Bearer ' + this.accessToken.token.access_token)
         .set('accept', 'application/json')
         .use(this.apiEndpoint)
         .ok(res => res.status < 400)
         .catch(err => console.error(err));

      return response.body[resultKey];
   }

   print() {
      const sortedLockers = lockers.sort((x, y) => x.DoorNumber - y.DoorNumber);
      sortedLockers.forEach((locker) => console.log(`${locker.DoorNumber}: ${locker.LockerBankId},${locker.Id}`));
   }
}

start();

async function start() {
   const lockerFetcher = new LockerFetcher();
   await lockerFetcher.initialize();
   await lockerFetcher.start();
}
